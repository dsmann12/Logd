"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (valueReducerFunction) {
    var rejectFunction = void 0,
        resolveFunction = void 0;

    var callbackFunction = function callbackFunction(error) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
        }

        var value = void 0;

        if (error) {
            rejectFunction(error);
            return;
        }

        if (!valueReducerFunction) {
            resolveFunction(args[0]);
            return;
        }

        try {
            value = valueReducerFunction.apply(undefined, args);
        } catch (valueResolverError) {
            rejectFunction(valueResolverError);
            return;
        }

        resolveFunction(value);
    },
        promise = new _promise2.default(function (resolve, reject) {
        rejectFunction = reject;
        resolveFunction = resolve;
    });

    return {
        callbackFunction: callbackFunction,
        promise: promise
    };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2pzL3Byb21pc2Utd2l0aC1jYWxsYmFjay5qcyJdLCJuYW1lcyI6WyJyZWplY3RGdW5jdGlvbiIsInJlc29sdmVGdW5jdGlvbiIsImNhbGxiYWNrRnVuY3Rpb24iLCJlcnJvciIsImFyZ3MiLCJ2YWx1ZSIsInZhbHVlUmVkdWNlckZ1bmN0aW9uIiwidmFsdWVSZXNvbHZlckVycm9yIiwicHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztrQkEyQ2UsZ0NBQXdCO0FBQ25DLFFBQUlBLHVCQUFKO0FBQUEsUUFDSUMsd0JBREo7O0FBR0EsUUFBTUMsbUJBQW1CLFNBQW5CQSxnQkFBbUIsQ0FBQ0MsS0FBRCxFQUFvQjtBQUFBLDBDQUFUQyxJQUFTO0FBQVRBLGdCQUFTO0FBQUE7O0FBQ3JDLFlBQUlDLGNBQUo7O0FBRUEsWUFBSUYsS0FBSixFQUFXO0FBRVBILDJCQUFlRyxLQUFmO0FBQ0E7QUFDSDs7QUFFRCxZQUFJLENBQUNHLG9CQUFMLEVBQTJCO0FBRXZCTCw0QkFBZ0JHLEtBQUssQ0FBTCxDQUFoQjtBQUNBO0FBQ0g7O0FBRUQsWUFBSTtBQUVBQyxvQkFBUUMsc0NBQXdCRixJQUF4QixDQUFSO0FBQ0gsU0FIRCxDQUdFLE9BQU9HLGtCQUFQLEVBQTJCO0FBRXpCUCwyQkFBZU8sa0JBQWY7QUFDQTtBQUNIOztBQUdETix3QkFBZ0JJLEtBQWhCO0FBQ0gsS0ExQkw7QUFBQSxRQTJCSUcsVUFBVSxzQkFBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFFdkNWLHlCQUFpQlUsTUFBakI7QUFDQVQsMEJBQWtCUSxPQUFsQjtBQUNILEtBSlMsQ0EzQmQ7O0FBaUNBLFdBQU87QUFDSFAsMENBREc7QUFFSE07QUFGRyxLQUFQO0FBSUgsQyIsImZpbGUiOiJwcm9taXNlLXdpdGgtY2FsbGJhY2suanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxucHJvbWlzZS13aXRoLWNhbGxiYWNrLmpzXG5AYXV0aG9yIER1YW5lIFNpYmlsbHkgPGR1YW5lLnNpYmlsbHlAaWJpZ3JvdXAuY29tPlxuXG5DcmVhdGVzIGEgUHJvbWlzZSB3aXRoIGFuIGFzc29jaWF0ZWQgY2FsbGJhY2sgZnVuY3Rpb24uIEludm9raW5nIHRoZVxuY2FsbGJhY2sgZnVuY3Rpb24gd2lsbCByZXNvbHZlIG9yIHJlamVjdCB0aGUgUHJvbWlzZSBhY2NvcmRpbmdseSBiYXNlZFxub24gaXRzIGFyZ3VtZW50cywgZS5nLlxuXG5gYGBcbmltcG9ydCB7XG4gICAgcmVhZEZpbGVcbn0gZnJvbSAnZnMnO1xuXG5jb25zdCBwcm9taXNlUmVhZEZpbGUgPSAocGF0aCwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgY2FsbGJhY2tGdW5jdGlvbixcbiAgICAgICAgcHJvbWlzZVxuICAgIH0gPSBwcm9taXNlV2l0aENhbGxiYWNrKCk7XG5cbiAgICByZWFkRmlsZShmaWxlbmFtZSwgb3B0aW9ucywgY2FsbGJhY2tGdW5jdGlvbik7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbnByb21pc2VSZWFkRmlsZSgnLi9leGFtcGxlLnR4dCcpLnRoZW4oZGF0YSA9PiB7XG4gICAgLy8gdGhlIGZpbGUncyBkYXRhIGlzIGhlcmUgaWYgcmVzb2x2ZWQuLi5cbn0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAvLyB0aGUgcmVqZWN0aW9uIGVycm9yIGlzIGhlcmUgaXMgcmVqZWN0ZWRcbn0pO1xuYGBgXG5cblRoaXMgbWF5IGFsc28gYmUgY3JlYXRlZCB3aXRoIGEgJ3ZhbHVlIHJlZHVjZXInLCBhIGZ1bmN0aW9uIGFyZ3VtZW50XG50aGF0IHJlZHVjZXMgdGhlIHZhbHVlcyBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGEgc2luZ2xlXG52YWx1ZS5cblxuYGBgXG5jb25zdCB7XG4gICAgY2FsbGJhY2tGdW5jdGlvbixcbiAgICBwcm9taXNlXG59ID0gcHJvbWlzZVdpdGhDYWxsYmFjayhBcnJheS5vZik7XG5cbmNhbGxiYWNrRnVuY3Rpb24obnVsbCwgJ3gnLCAneScsICd6Jyk7IC8vIHJlc29sdmVzIGFzIFsneCcsICd5JywgJ3onXVxuYGBgXG4qL1xuZXhwb3J0IGRlZmF1bHQgdmFsdWVSZWR1Y2VyRnVuY3Rpb24gPT4ge1xuICAgIGxldCByZWplY3RGdW5jdGlvbixcbiAgICAgICAgcmVzb2x2ZUZ1bmN0aW9uO1xuXG4gICAgY29uc3QgY2FsbGJhY2tGdW5jdGlvbiA9IChlcnJvciwgLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgbGV0IHZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBSZWplY3Qgd2l0aCB0aGUgZXJyb3JcbiAgICAgICAgICAgICAgICByZWplY3RGdW5jdGlvbihlcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXZhbHVlUmVkdWNlckZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVzb2x2ZSB3aXRoIHRoZSBmaXJzdCBhcmd1bWVudCB2YWx1ZVxuICAgICAgICAgICAgICAgIHJlc29sdmVGdW5jdGlvbihhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gVHJ5IHRvIHJlZHVjZSB0aGUgYXJndW1lbnQgdmFsdWVzXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZVJlZHVjZXJGdW5jdGlvbiguLi5hcmdzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHZhbHVlUmVzb2x2ZXJFcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIFJlamVjdCB3aXRoIHRoZSBlcnJvclxuICAgICAgICAgICAgICAgIHJlamVjdEZ1bmN0aW9uKHZhbHVlUmVzb2x2ZXJFcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXNvbHZlIHdpdGggdGhlIHJlZHVjZWQgYXJndW1lbnQgdmFsdWVzXG4gICAgICAgICAgICByZXNvbHZlRnVuY3Rpb24odmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgLy8gRXhwb3J0IHJlc29sdmUgYW5kIHJlamVjdCBmdW5jdGlvbnMgdG8gb3V0ZXIgc2NvcGVcbiAgICAgICAgICAgIHJlamVjdEZ1bmN0aW9uID0gcmVqZWN0O1xuICAgICAgICAgICAgcmVzb2x2ZUZ1bmN0aW9uID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBjYWxsYmFja0Z1bmN0aW9uLFxuICAgICAgICBwcm9taXNlXG4gICAgfTtcbn07XG4iXX0=