'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _requestPromise = require('./request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (url, apiService) {
    var options = {
        headers: {
            Accept: 'application/json'
        },
        url: url
    };

    options.headers[apiService.keyHeader] = apiService.key;

    return (0, _requestPromise2.default)(options).then(function (result) {
        return new _promise2.default(function (resolve, reject) {
            if (result.response.statusCode !== 200) {
                reject(new Error('HTTP Status ' + result.response.statusCode + ' - ' + options.url));
                return;
            }

            try {
                resolve({
                    body: JSON.parse(result.body),
                    headers: result.response.headers,
                    scrollCount: result.response.headers['x-count'] || result.response.headers['X-Count'],
                    scrollUrl: result.response.headers['x-next-page'] || result.response.headers['X-Next-Page'],
                    url: options.url
                });
            } catch (error) {
                reject(error);
            }
        });
    });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2pzL3BlcmZvcm0tcmVxdWVzdC5qcyJdLCJuYW1lcyI6WyJ1cmwiLCJhcGlTZXJ2aWNlIiwib3B0aW9ucyIsImhlYWRlcnMiLCJBY2NlcHQiLCJrZXlIZWFkZXIiLCJrZXkiLCJ0aGVuIiwicmVzb2x2ZSIsInJlamVjdCIsInJlc3VsdCIsInJlc3BvbnNlIiwic3RhdHVzQ29kZSIsIkVycm9yIiwiYm9keSIsIkpTT04iLCJwYXJzZSIsInNjcm9sbENvdW50Iiwic2Nyb2xsVXJsIiwiZXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFDQTs7Ozs7O2tCQVVlLFVBQUNBLEdBQUQsRUFBTUMsVUFBTixFQUFxQjtBQUNoQyxRQUFNQyxVQUFVO0FBQ1pDLGlCQUFTO0FBQ0xDLG9CQUFRO0FBREgsU0FERztBQUlaSjtBQUpZLEtBQWhCOztBQVlBRSxZQUFRQyxPQUFSLENBQWdCRixXQUFXSSxTQUEzQixJQUF3Q0osV0FBV0ssR0FBbkQ7O0FBR0EsV0FBTyw4QkFBUUosT0FBUixFQUFpQkssSUFBakIsQ0FBc0I7QUFBQSxlQUFVLHNCQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUNwRSxnQkFBSUMsT0FBT0MsUUFBUCxDQUFnQkMsVUFBaEIsS0FBK0IsR0FBbkMsRUFBd0M7QUFDcENILHVCQUFPLElBQUlJLEtBQUosa0JBQXlCSCxPQUFPQyxRQUFQLENBQWdCQyxVQUF6QyxXQUF5RFYsUUFBUUYsR0FBakUsQ0FBUDtBQUNBO0FBQ0g7O0FBRUQsZ0JBQUk7QUFNQVEsd0JBQVE7QUFDSk0sMEJBQU1DLEtBQUtDLEtBQUwsQ0FBV04sT0FBT0ksSUFBbEIsQ0FERjtBQUVKWCw2QkFBU08sT0FBT0MsUUFBUCxDQUFnQlIsT0FGckI7QUFHSmMsaUNBQWFQLE9BQU9DLFFBQVAsQ0FBZ0JSLE9BQWhCLENBQXdCLFNBQXhCLEtBQXNDTyxPQUFPQyxRQUFQLENBQWdCUixPQUFoQixDQUF3QixTQUF4QixDQUgvQztBQUlKZSwrQkFBV1IsT0FBT0MsUUFBUCxDQUFnQlIsT0FBaEIsQ0FBd0IsYUFBeEIsS0FBMENPLE9BQU9DLFFBQVAsQ0FBZ0JSLE9BQWhCLENBQXdCLGFBQXhCLENBSmpEO0FBS0pILHlCQUFLRSxRQUFRRjtBQUxULGlCQUFSO0FBT0gsYUFiRCxDQWFFLE9BQU9tQixLQUFQLEVBQWM7QUFFWlYsdUJBQU9VLEtBQVA7QUFDSDtBQUNKLFNBdkJzQyxDQUFWO0FBQUEsS0FBdEIsQ0FBUDtBQXdCSCxDIiwiZmlsZSI6InBlcmZvcm0tcmVxdWVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBuby1wcm9jZXNzLWVudjogMCAqL1xuaW1wb3J0IHJlcXVlc3QgZnJvbSAnLi9yZXF1ZXN0LXByb21pc2UnO1xuXG4vKipcbiAqIFNlbmRzIGEgSFRUUCByZXF1ZXN0IHRvIHRoZSBwcm92aWRlZCBVUkwuXG4gKiBAYXJnIHtzdHJpbmd9IHVybFxuICogQGFyZyB7b2JqZWN0fSBbYXBpU2VydmljZV0gVGhlIEFQSSBzZXJ2aWNlIG9iamVjdCBjb250YWluaW5nIGVuZHBvaW50IGRldGFpbHMgYW5kIGtleVxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gVGhlIHBhcnNlZCBIVFRQIHJlc3BvbnNlXG4gKiBAZXhhbXBsZVxuICogcGVyZm9ybVJlcXVlc3QoJ2h0dHA6Ly9leGFtcGxlLmNvbS9hcGkvdjEvZXhhbXBsZUVuZHBvaW50JywgJ2V4YW1wbGUtYXBpLWtleS0xMjMnKS50aGVuKGNvbnNvbGUubG9nKVxuICovXG5leHBvcnQgZGVmYXVsdCAodXJsLCBhcGlTZXJ2aWNlKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfSxcbiAgICAgICAgdXJsXG4gICAgfTtcblxuICAgIC8qXG4gICAgSWYgbm8gQVBJIGtleSBpcyBwcm92aWRlZCB0byB0aGUgZnVuY3Rpb24sIGxvb2sgZm9yIHRoZSBrZXkgaW4gdGhlXG4gICAgcHJvY2VzcyBvciBnbG9iYWwgc2NvcGUuIFRoZSBwcm9wZXJ0eSB0byBpbnNwZWN0IGlzIHNldCBpblxuICAgIGNvbmZpZ3VyYXRpb24uanMgYXMgYGdsb2JhbFByb3BlcnR5YC5cbiAgICAqL1xuICAgIG9wdGlvbnMuaGVhZGVyc1thcGlTZXJ2aWNlLmtleUhlYWRlcl0gPSBhcGlTZXJ2aWNlLmtleTtcblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3QgdG8gdGhlIEFQSVxuICAgIHJldHVybiByZXF1ZXN0KG9wdGlvbnMpLnRoZW4ocmVzdWx0ID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdC5yZXNwb25zZS5zdGF0dXNDb2RlICE9PSAyMDApIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYEhUVFAgU3RhdHVzICR7cmVzdWx0LnJlc3BvbnNlLnN0YXR1c0NvZGV9IC0gJHtvcHRpb25zLnVybH1gKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLypcbiAgICAgICAgICAgIEFsd2F5cyB3cmFwIGFueSBsb2dpYyBjb250YWluaW5nIEpTT04ucGFyc2UoKSBpbiBhXG4gICAgICAgICAgICB0cnktY2F0Y2ggYmxvY2sganVzdCBpbiBjYXNlIHRoZSBzdHJpbmcgaXMgbWFsZm9ybWVkXG4gICAgICAgICAgICBhbmQgaXQgdGhyb3dzIGFuIEVycm9yLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04ucGFyc2UocmVzdWx0LmJvZHkpLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHJlc3VsdC5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIHNjcm9sbENvdW50OiByZXN1bHQucmVzcG9uc2UuaGVhZGVyc1sneC1jb3VudCddIHx8IHJlc3VsdC5yZXNwb25zZS5oZWFkZXJzWydYLUNvdW50J10sXG4gICAgICAgICAgICAgICAgc2Nyb2xsVXJsOiByZXN1bHQucmVzcG9uc2UuaGVhZGVyc1sneC1uZXh0LXBhZ2UnXSB8fCByZXN1bHQucmVzcG9uc2UuaGVhZGVyc1snWC1OZXh0LVBhZ2UnXSxcbiAgICAgICAgICAgICAgICB1cmw6IG9wdGlvbnMudXJsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEpTT04ucGFyc2UoKSBlcnJvclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgIH0pKTtcbn07XG4iXX0=