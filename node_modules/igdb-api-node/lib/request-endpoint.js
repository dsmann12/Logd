'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _performRequest = require('./perform-request');

var _performRequest2 = _interopRequireDefault(_performRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (endpoint, options, fields, apiService) {
    if (!endpoint) {
        return _promise2.default.reject(new Error('No API endpoint provided'));
    }

    var url = apiService.url + '/' + endpoint + '/';

    if (options) {
        url = (0, _keys2.default)(options).reduce(function (url, parameter) {
            var _url$options;

            var parameterValue = options[parameter];

            switch (parameter) {
                case 'filters':
                    (_url$options = url.options).push.apply(_url$options, (0, _toConsumableArray3.default)((0, _keys2.default)(parameterValue).reduce(function (optionUrls, filter) {
                        var splitFilter = filter.split('-').join('][');

                        optionUrls.push('filter[' + splitFilter + ']=' + parameterValue[filter]);
                        return optionUrls;
                    }, [])));
                    break;

                case 'ids':
                    url.baseUrl += parameterValue.join(',');
                    break;

                case 'expand':
                    url.options.push('expand=' + parameterValue.join(','));
                    break;

                default:
                    url.options.push(parameter + '=' + parameterValue);
            }

            return url;
        }, {
            baseUrl: url,
            options: []
        });

        if (fields) {
            url.options.push('fields=' + fields.join(','));
        }

        url = url.baseUrl + '?' + url.options.join('&');
    }

    return (0, _performRequest2.default)(url, apiService);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2pzL3JlcXVlc3QtZW5kcG9pbnQuanMiXSwibmFtZXMiOlsiZW5kcG9pbnQiLCJvcHRpb25zIiwiZmllbGRzIiwiYXBpU2VydmljZSIsInJlamVjdCIsIkVycm9yIiwidXJsIiwicmVkdWNlIiwicGFyYW1ldGVyIiwicGFyYW1ldGVyVmFsdWUiLCJwdXNoIiwib3B0aW9uVXJscyIsImZpbHRlciIsInNwbGl0RmlsdGVyIiwic3BsaXQiLCJqb2luIiwiYmFzZVVybCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7OztrQkFZZSxVQUFDQSxRQUFELEVBQVdDLE9BQVgsRUFBb0JDLE1BQXBCLEVBQTRCQyxVQUE1QixFQUEyQztBQUN0RCxRQUFJLENBQUNILFFBQUwsRUFBZTtBQUNYLGVBQU8sa0JBQVFJLE1BQVIsQ0FBZSxJQUFJQyxLQUFKLENBQVUsMEJBQVYsQ0FBZixDQUFQO0FBQ0g7O0FBRUQsUUFBSUMsTUFBU0gsV0FBV0csR0FBcEIsU0FBMkJOLFFBQTNCLE1BQUo7O0FBRUEsUUFBSUMsT0FBSixFQUFhO0FBQ1RLLGNBQU0sb0JBQVlMLE9BQVosRUFBcUJNLE1BQXJCLENBQTRCLFVBQUNELEdBQUQsRUFBTUUsU0FBTixFQUFvQjtBQUFBOztBQUNsRCxnQkFBTUMsaUJBQWlCUixRQUFRTyxTQUFSLENBQXZCOztBQUVBLG9CQUFRQSxTQUFSO0FBQ0kscUJBQUssU0FBTDtBQUNJLHdDQUFJUCxPQUFKLEVBQVlTLElBQVosc0RBQW9CLG9CQUFZRCxjQUFaLEVBQTRCRixNQUE1QixDQUFtQyxVQUFDSSxVQUFELEVBQWFDLE1BQWIsRUFBd0I7QUFDM0UsNEJBQU1DLGNBQWNELE9BQU9FLEtBQVAsQ0FBYSxHQUFiLEVBQWtCQyxJQUFsQixDQUF1QixJQUF2QixDQUFwQjs7QUFFQUosbUNBQVdELElBQVgsYUFBMEJHLFdBQTFCLFVBQTBDSixlQUFlRyxNQUFmLENBQTFDO0FBQ0EsK0JBQU9ELFVBQVA7QUFDSCxxQkFMbUIsRUFLakIsRUFMaUIsQ0FBcEI7QUFNQTs7QUFFSixxQkFBSyxLQUFMO0FBQ0lMLHdCQUFJVSxPQUFKLElBQWVQLGVBQWVNLElBQWYsQ0FBb0IsR0FBcEIsQ0FBZjtBQUNBOztBQUVKLHFCQUFLLFFBQUw7QUFDSVQsd0JBQUlMLE9BQUosQ0FBWVMsSUFBWixhQUEyQkQsZUFBZU0sSUFBZixDQUFvQixHQUFwQixDQUEzQjtBQUNBOztBQUVKO0FBQ0lULHdCQUFJTCxPQUFKLENBQVlTLElBQVosQ0FBb0JGLFNBQXBCLFNBQWlDQyxjQUFqQztBQW5CUjs7QUFzQkEsbUJBQU9ILEdBQVA7QUFDSCxTQTFCSyxFQTBCSDtBQUNDVSxxQkFBU1YsR0FEVjtBQUVDTCxxQkFBUztBQUZWLFNBMUJHLENBQU47O0FBK0JBLFlBQUlDLE1BQUosRUFBWTtBQUNSSSxnQkFBSUwsT0FBSixDQUFZUyxJQUFaLGFBQTJCUixPQUFPYSxJQUFQLENBQVksR0FBWixDQUEzQjtBQUNIOztBQUVEVCxjQUFTQSxJQUFJVSxPQUFiLFNBQXdCVixJQUFJTCxPQUFKLENBQVljLElBQVosQ0FBaUIsR0FBakIsQ0FBeEI7QUFDSDs7QUFFRCxXQUFPLDhCQUFlVCxHQUFmLEVBQW9CSCxVQUFwQixDQUFQO0FBQ0gsQyIsImZpbGUiOiJyZXF1ZXN0LWVuZHBvaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBlcmZvcm1SZXF1ZXN0IGZyb20gJy4vcGVyZm9ybS1yZXF1ZXN0JztcblxuLyoqXG4gKiBDb21wb3NlcyBhbmQgc2VuZHMgYW4gQVBJIHJlcXVlc3QgVVJMIGJhc2VkIG9uIHByb3ZpZGVkIGZpZWxkcyBhbmQgb3B0aW9ucy5cbiAqIEBhcmcge3N0cmluZ30gZW5kcG9pbnRcbiAqIEBhcmcge09iamVjdH0gW29wdGlvbnNdXG4gKiBAYXJnIHtBcnJheX0gW2ZpZWxkc11cbiAqIEBhcmcge29iamVjdH0gW2FwaVNlcnZpY2VdXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fVxuICogQGV4YW1wbGVcbiAqIHJlcXVlc3RFbmRwb2ludCgnZXhhbXBsZScsIHsgZmllbGRzOiAnKicsIGxpbWl0OiAxMCB9LCBbJ2lkJywgJ25hbWUnXSwgJ2V4YW1wbGUtYXBpLWtleS0xMjMnKS50aGVuKGNvbnNvbGUubG9nKVxuICovXG5leHBvcnQgZGVmYXVsdCAoZW5kcG9pbnQsIG9wdGlvbnMsIGZpZWxkcywgYXBpU2VydmljZSkgPT4ge1xuICAgIGlmICghZW5kcG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignTm8gQVBJIGVuZHBvaW50IHByb3ZpZGVkJykpO1xuICAgIH1cblxuICAgIGxldCB1cmwgPSBgJHthcGlTZXJ2aWNlLnVybH0vJHtlbmRwb2ludH0vYDtcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIHVybCA9IE9iamVjdC5rZXlzKG9wdGlvbnMpLnJlZHVjZSgodXJsLCBwYXJhbWV0ZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlclZhbHVlID0gb3B0aW9uc1twYXJhbWV0ZXJdO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHBhcmFtZXRlcikge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2ZpbHRlcnMnOlxuICAgICAgICAgICAgICAgICAgICB1cmwub3B0aW9ucy5wdXNoKC4uLk9iamVjdC5rZXlzKHBhcmFtZXRlclZhbHVlKS5yZWR1Y2UoKG9wdGlvblVybHMsIGZpbHRlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BsaXRGaWx0ZXIgPSBmaWx0ZXIuc3BsaXQoJy0nKS5qb2luKCddWycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25VcmxzLnB1c2goYGZpbHRlclske3NwbGl0RmlsdGVyfV09JHtwYXJhbWV0ZXJWYWx1ZVtmaWx0ZXJdfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvblVybHM7XG4gICAgICAgICAgICAgICAgICAgIH0sIFtdKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnaWRzJzpcbiAgICAgICAgICAgICAgICAgICAgdXJsLmJhc2VVcmwgKz0gcGFyYW1ldGVyVmFsdWUuam9pbignLCcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2V4cGFuZCc6XG4gICAgICAgICAgICAgICAgICAgIHVybC5vcHRpb25zLnB1c2goYGV4cGFuZD0ke3BhcmFtZXRlclZhbHVlLmpvaW4oJywnKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB1cmwub3B0aW9ucy5wdXNoKGAke3BhcmFtZXRlcn09JHtwYXJhbWV0ZXJWYWx1ZX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgYmFzZVVybDogdXJsLFxuICAgICAgICAgICAgb3B0aW9uczogW11cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGZpZWxkcykge1xuICAgICAgICAgICAgdXJsLm9wdGlvbnMucHVzaChgZmllbGRzPSR7ZmllbGRzLmpvaW4oJywnKX1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybCA9IGAke3VybC5iYXNlVXJsfT8ke3VybC5vcHRpb25zLmpvaW4oJyYnKX1gO1xuICAgIH1cblxuICAgIHJldHVybiBwZXJmb3JtUmVxdWVzdCh1cmwsIGFwaVNlcnZpY2UpO1xufTtcbiJdfQ==